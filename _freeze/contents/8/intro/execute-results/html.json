{
  "hash": "afe3c4313b52c8d9f6c5c5fdd7f53402",
  "result": {
    "engine": "knitr",
    "markdown": "# R Fundamentals\n\n\nA few advantages about R:\n\n- Free and open source comparing to some other tools like Excel and SPSS.\n- Optimized with vectorization.\n\n\n\n\n\n\n## Hello world for R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint('Hello world!')\n#> [1] \"Hello world!\"\n```\n:::\n\n\n## Essential concepts\n\n- In R, assignments is ` <- `, not `=`. `=` actually works, but it may cause confusions. So it is always recommended to use ` <- `. The R Studio keybinding for ` <- ` is `alt+-`.\n- `.` is NOT a special character in R, and can be used in variable names. So `is.na()` simply means a function called `is.na`. It is not a function `na` in a package `is` as in Python.\n- In R, the block is defined by `{}`. Indentation is not that important.\n- R has a better package management system than Python, and therefore in most cases you don't need virtual environment for R.\n\n\n### R Markdown / Quarto\nThe counterpart of Jupyter notebook in R is `.rmd/.qmd` file. Similar to a notebook, in a R Markdown / Quarto file, there is a so-called code block that can run the codes inside to produce documents with both texts and codes and codes outputs.\n\nIn the following two sections about R, you are supposed to submit `.rmd/.qmd` file.\n\n::: {.callout-note}\nQuarto is an extension/continuation of R Markdown. Most R Markdown file can be directly translated to a Quarto file without many modifications. The main difference between R Markdown and Quarto is that Quarto has better support for other languages such as Python and Julia. You may go to [its homepage](https://quarto.org/) for more details. \n\nThis note is produced by Quarto.\n:::\n\nThe most import part of R Markdown / Quarto is the code block, that is \n```{{r}}\nprint('Hello world!')\n```\nIn Quarto, you may also write\n\n```{{python}}\nprint('Hello world!')\n```\nThere are many options to adjust how the code blocks are excacuted. You don't need to worry about them right now. Currently just try to write your report together with code blocks.\n\n\n\n\n\n## Data structures\nMain reference here is @Gro2014 and @Wic2017.\n\n### Vectors {#sec-r-rb-ds-vectors}\nVector is one of the basic data structure in R. It is created by `c()` function. Sometimes it is called `atomic vector`. You may store any data types in it. R recognizes six basic types: *double*, *integers*, *characters*, *logicals*, *complex* and *raw*.\n\nThe data type inside a vector can be checked by `typeof` function.\n\n::: {.cell}\n\n```{.r .cell-code}\ndie <- c(1, 2, 3, 4, 5, 6)\ntypeof(die)\n#> [1] \"double\"\n```\n:::\nFor consecutive numbers, an easier way to create vector is to use `:`.\n\n::: {.cell}\n\n```{.r .cell-code}\ndie <- 1:6\n```\n:::\n\n\n::: {.callout-caution}\nNote that vector index starts from 1 in R, while list index starts from 0 in Python.\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndie[1]\n#> [1] 1\n```\n:::\nWhen slicing with vectors, don't forget to use `c()`.\n\n::: {.cell}\n\n```{.r .cell-code}\ndie[c(2, 3)]\n#> [1] 2 3\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndie[2:3]\n#> [1] 2 3\n```\n:::\n\nYou may use `length()` function to get its length.\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(die)\n#> [1] 6\n```\n:::\n\n\n\n### Attributes\n\nR objects may have attributes. Attributes won't be shown by default when you show the object. You may find the attributes of a R object by calling the `attributes()` function.\n\nThe following example show that the vector `die` defined in @sec-r-rb-ds-vectors doesn't have attributes.\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(die)\n#> NULL\n```\n:::\n\nAttributes can be read and write using `attr` function. See the following example.\n\n::: {#exm-}\n::: {.cell}\n\n```{.r .cell-code}\nattr(die, 'date') <- '2022-01-01'\ndie\n#> [1] 1 2 3 4 5 6\n#> attr(,\"date\")\n#> [1] \"2022-01-01\"\nattr(die, 'date') <- NULL\ndie\n#> [1] 1 2 3 4 5 6\n```\n:::\n:::\n\nYou may think attributes as metadata attached to a R object. They are used to tell some useful infomation of the object. Some functions will interact with certain attributes. R itself treat attributes `class`, `comment`, `dim`, `dimnames`, `names`, `row.names` and `tsp` specially. We will only talk about `class` and `names` here. `dim` will be discussed in the next section. Others will be discussed when we use them.\n\n1. `class`: This is different from the class in Python. `class` in R is an attribute which talks about the class of an object. If the attribute `class` is not assigned to an object, the object will have an implicit class: `matrix`, `array`, `function`, `numeric` or the result of `typeof`. \n\n`attr(x, 'class')` will show the \"external\" class of an object. You may also use `class(x)` to read and write attribute `class`. If the `class` is not assigned, `class(x)` will show the implicit class, while `attr(x, 'class')` will show `NULL`. \n\n\n::: {#exm-}\n\n::: {.cell}\n\n```{.r .cell-code}\nattr(die, 'class')\n#> NULL\nclass(die)\n#> [1] \"integer\"\nclass(die) <- 'a die'\nattr(die, 'class')\n#> [1] \"a die\"\nclass(die)\n#> [1] \"a die\"\n```\n:::\n:::\n::: {.cell}\n\n:::\n\n2. `names`: This attribute is used to name each element in a vector. After the names are assigned, it won't be displayed below the data like other attributes. It will be displayed above the data with correct alignment. Similar to `class`, you may use `names()` to read and write the attribute.\n\n\n::: {#exm-}\n::: {.cell}\n\n```{.r .cell-code}\nnames(die) <- c('one', 'two', 'three', 'four', 'five', 'six')\ndie\n#>   one   two three  four  five   six \n#>     1     2     3     4     5     6\nattributes(die)\n#> $names\n#> [1] \"one\"   \"two\"   \"three\" \"four\"  \"five\"  \"six\"\nnames(die)\n#> [1] \"one\"   \"two\"   \"three\" \"four\"  \"five\"  \"six\"\nis.vector(die)\n#> [1] TRUE\n```\n:::\n:::\n\n\n::: {.callout-tip}\nWhen you store different types of data into a single vector in R, R will convert them into a single type. The default way to do so is\n\n- if there are only logicals and numbers, logicals will be converted to numbers by `TRUE->1` and `FALSE->0`.\n- if characters are presented, all are converted to characters by what it is.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, TRUE)\n#> [1] 1 1\nc('1', 1, TRUE)\n#> [1] \"1\"    \"1\"    \"TRUE\"\n```\n:::\n:::\n\n\n\n::: {.callout-note}\nWe can apply regular operators to vectors. The defaul way is to apply the operators element-wise.\n:::\n\n\n### matrices and arrays\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(c(1,2,3,4,5,6), nrow=2)\nm[1, ]\n#> [1] 1 3 5\n```\n:::\nA matrix has `dim` attribute.\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(m)\n#> [1] 2 3\n```\n:::\n\nNote that by assigning and removing `dim` attribute, you may change the object between vectors and matrices.\n\n\n::: {#exm-}\n\n::: {.cell}\n\n```{.r .cell-code}\nm\n#>      [,1] [,2] [,3]\n#> [1,]    1    3    5\n#> [2,]    2    4    6\nis.matrix(m)\n#> [1] TRUE\nis.vector(m)\n#> [1] FALSE\ndim(m)\n#> [1] 2 3\ndim(m) <- NULL\nm\n#> [1] 1 2 3 4 5 6\nis.matrix(m)\n#> [1] FALSE\nis.vector(m)\n#> [1] TRUE\n```\n:::\n:::\n\n\n::: {.callout-note}\nThe `dim` of a matrix/vector can be a long vector. In this case, it will become an array. \n:::\n\n### factors\nFactor is speical vector. It is a way to handle categorical data. The idea is the limit the possible values. In a factor all possible values are called `level`, which is an attribute. \n\n\n::: {#exm-}\nWe would like to talk about all months. We first define a vector of the valid levels:\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth_levels <- c(\n  \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n)\n```\n:::\nThen we could start to transform some month vector into factors, by the function `factor()`.\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 <- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\ny1 <- factor(x1, level=month_levels)\nsort(x1)\n#> [1] \"Apr\" \"Dec\" \"Jan\" \"Mar\"\nsort(y1)\n#> [1] Jan Mar Apr Dec\n#> Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\nNote that sorting `y1` is based on the levels.\n\n::: {.cell}\n\n```{.r .cell-code}\nx2 <- c(\"Dec\", \"Apr\", \"Jam\", \"Mar\")\ny2 <- factor(x2, level=month_levels)\ny2\n#> [1] Dec  Apr  <NA> Mar \n#> Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\nNote that `y2` contains `NA` value since there is an entry in `x2` that is not valid.\n:::\n\n\n\n### Lists\nList is very similar to a vector. The main difference is that vector can only store values, while list can store objects. The most typical example of objects is another vector. Please see the following example.\n\n::: {#exm-}\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1:2, 3:4)\n#> [1] 1 2 3 4\nlist(1:2, 3:4)\n#> [[1]]\n#> [1] 1 2\n#> \n#> [[2]]\n#> [1] 3 4\n```\n:::\n\n:::\n\n::: {.callout-note}\nThe attributes of an object is stored in an array.\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(c(1,2,3,4,5,6), nrow=2)\na <- attributes(m)\nclass(a)\n#> [1] \"list\"\n```\n:::\n\n:::\n\n\n\n### `data.frame`\nData.Frame is a list with the `class` attribute `data.frame`, together with some restriction on the shape of each columns. You may think about it in terms of tables.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(face = c(\"ace\", \"two\", \"six\"),\n                 suit = c(\"clubs\", \"clubs\", \"clubs\"),\n                 value = c(1, 2, 3))\ndf\n#>   face  suit value\n#> 1  ace clubs     1\n#> 2  two clubs     2\n#> 3  six clubs     3\n```\n:::\n\n- Data Frame group vectors. Each vector represents a column.\n- Different column can contain a different type of data, but every cell within one column must be the same type of data.\n- `data.frame()` can be used to create a data.frame. \n- The type of a data.frame is a list. Similar to matrix comparing to vector, a `data.frame` is a `list` with `class` `data.frame`, as well as a few other attributes.\n\n\n\n### Examples\n\n\n::: {#exm-}\nConsider a date.frame representing a deck of cards. Here we use `expand.grid()` to perform the Cartesian product.\n\n::: {.cell}\n\n```{.r .cell-code}\nsuit <- c('spades', 'hearts', 'clubs', 'diamonds')\nface <- 1:13\ndeck <- expand.grid(suit, face)\nhead(deck)\n#>       Var1 Var2\n#> 1   spades    1\n#> 2   hearts    1\n#> 3    clubs    1\n#> 4 diamonds    1\n#> 5   spades    2\n#> 6   hearts    2\n```\n:::\nWe may assign names to change the column names.\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(deck) <- c('suit', 'face')\nhead(deck)\n#>       suit face\n#> 1   spades    1\n#> 2   hearts    1\n#> 3    clubs    1\n#> 4 diamonds    1\n#> 5   spades    2\n#> 6   hearts    2\n```\n:::\n\nNote that since `suit` and `face` are two vectors, `merge()` can also do the Cartesian product. `expand.grid()` is good for both vectors and data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeck <- merge(suit, face)\nhead(deck)\n#>          x y\n#> 1   spades 1\n#> 2   hearts 1\n#> 3    clubs 1\n#> 4 diamonds 1\n#> 5   spades 2\n#> 6   hearts 2\n```\n:::\n\n:::\n\n\n### Load data\n\n#### build-in datasets\nR has many build-in datasets. You may use `data()` to see all of them. Here are a few common datasets.\n\n- `mtcars`: Motor Trend Car Road Tests: The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models)\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(mtcars)\n```\n:::\n\n- `iris`: iris data set gives the measurements in centimeters of the variables sepal length, sepal width, petal length and petal width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris)\n```\n:::\n\n- `ToothGrowth`: ToothGrowth data set contains the result from an experiment studying the effect of vitamin C on tooth growth in 60 Guinea pigs. \n\n::: {.cell}\n\n```{.r .cell-code}\ndata(ToothGrowth)\n```\n:::\n\n- `PlantGrowth`: Results obtained from an experiment to compare yields (as measured by dried weight of plants) obtained under a control and two different treatment condition.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(PlantGrowth)\n```\n:::\n\n- `USArrests`: This data set contains statistics about violent crime rates by us state.\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(USArrests)\n```\n:::\n\n#### Read from files\nThe build-in `read.csv()` function can directly read `.csv` file into a data.frame.\n\n\n::: {#exm-}\nWe use the file `yob1880.txt` from Chapter 5 here. Put the file in the working folder and run the following code.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv('yob1880.txt', header = FALSE)\nhead(df)\n```\n:::\n\n::: {.cell}\n\n:::\nWe may also manually assign columns names.\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(df) <- c('name', 'sex', 'counts')\nhead(df)\n#>        name sex counts\n#> 1      Mary   F   7065\n#> 2      Anna   F   2604\n#> 3      Emma   F   2003\n#> 4 Elizabeth   F   1939\n#> 5    Minnie   F   1746\n#> 6  Margaret   F   1578\n```\n:::\n:::\n\n\n::: {.callout-note}\nTo save data is straightforward. \n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(df, file='df.csv', row.names=FALSE)\n```\n:::\n:::\n\n\n\n\n\n### Flow control\n\n#### `for` loop\n\n\n::: {#exm-}\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (x in 1:10){\n    print(x)\n}\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n#> [1] 6\n#> [1] 7\n#> [1] 8\n#> [1] 9\n#> [1] 10\n```\n:::\n\n:::\n\n\n#### `if-else` \n\n\n::: {#exm-}\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 200\nb <- 33\n\nif (b > a) {\n  print(\"b is greater than a\")\n} else if (a == b) {\n  print(\"a and b are equal\")\n} else {\n  print(\"a is greater than b\")\n}\n#> [1] \"a is greater than b\"\n```\n:::\n\n:::\n\n\n#### Functions\nThe standard format to define a function is `my_function <- function(input) {}` where the function name is on the left side of `<-`, the input arguments are in the `()`, and the function body is in `{}`. The output of the last line of the function body is the return value of the function.\n\n::: {#exm-}\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfunction <- function() {\n    die <- 1:6\n    sum(die)\n}\n\nmyfunction()\n#> [1] 21\n```\n:::\nIf you just type the function name without `()`, R will return the definition of the function.\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfunction\n#> function() {\n#>     die <- 1:6\n#>     sum(die)\n#> }\n```\n:::\n\n:::\n\n\n\n::: {.callout-tip}\nThe function `sample(x)`: `sample` takes a sample of the specified size from the elements of `x` using either with or without replacement. \n\n`sample(x, size, replace = FALSE, prob = NULL)`: \n\n- `x`: either a vector of one or more elements from which to choose, or a positive integer.\n- `size`: a non-negative integer giving the number of items to choose.\n- `replace`: should sampling be with replacement?\n- `prob`: a vector of probability weights for obtaining the elements of the vector being sampled.\n:::\n\n\n\n## R notations\n\n### Selecting Values\nLet us start from a data.frame `df`. The basic usage is `df[ , ]`, where the first index is to subset the rows and the second index is to subset the columns. There are six ways to writing indexes.\n\n1. Positive integers: the regular way.\n\n- `df[i, j]` means the data in the ith row and jth column. \n- If both `i` and `j` are vectors, a data.frame will be returned.\n- If `i` or `j` are a vector, a vector will be returned. If you still want a data.frame, you may add the option `drop=FALSE`.\n- If only one index is provided, it refers to the column.\n\n::: {#exm-}\nWe consider the simplified version of a deck. The deck only contains face values from 1 to 5.\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndeck[1:2, 1:2]\n#>     Var1 Var2\n#> 1 spades    1\n#> 2 hearts    1\ndeck[1:2, 1]\n#> [1] spades hearts\n#> Levels: spades hearts clubs diamonds\ndeck[1:2, 1, drop=FALSE]\n#>     Var1\n#> 1 spades\n#> 2 hearts\ndeck[1]\n#>        Var1\n#> 1    spades\n#> 2    hearts\n#> 3     clubs\n#> 4  diamonds\n#> 5    spades\n#> 6    hearts\n#> 7     clubs\n#> 8  diamonds\n#> 9    spades\n#> 10   hearts\n#> 11    clubs\n#> 12 diamonds\n#> 13   spades\n#> 14   hearts\n#> 15    clubs\n#> 16 diamonds\n#> 17   spades\n#> 18   hearts\n#> 19    clubs\n#> 20 diamonds\n```\n:::\n:::\n\n2. Negative integers: remove the related index.\n\nFor example, \n\n- `deck[-1, 1:3]` means it wants all rows except row 1, and column 1 to 3. \n- `deck[-(2:20), 1:2]` means it wants all rows ecepte row 2 to row 20, and column 1 to 2.\n- Negative index and positive index cannot be used together in the same index.\n\n3. Blank Spaces: want every value in the dimension.\n\n::: {.cell}\n\n```{.r .cell-code}\ndeck[, 1]\n#>  [1] spades   hearts   clubs    diamonds spades   hearts   clubs    diamonds\n#>  [9] spades   hearts   clubs    diamonds spades   hearts   clubs    diamonds\n#> [17] spades   hearts   clubs    diamonds\n#> Levels: spades hearts clubs diamonds\ndeck[1, ]\n#>     Var1 Var2\n#> 1 spades    1\n```\n:::\n\n4. Logical values: select the rows or columns according to the value. The dimension should have exactly the same number of elements as the logical vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrows <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, FALSE, TRUE)\ndeck[rows,]\n#>        Var1 Var2\n#> 1    spades    1\n#> 3     clubs    1\n#> 5    spades    2\n#> 6    hearts    2\n#> 8  diamonds    2\n#> 10   hearts    3\n#> 11    clubs    3\n#> 13   spades    4\n#> 15    clubs    4\n#> 16 diamonds    4\n#> 18   hearts    5\n#> 20 diamonds    5\ndeck[1:2, c(TRUE, FALSE)]\n#> [1] spades hearts\n#> Levels: spades hearts clubs diamonds\n```\n:::\n\n5. Names: select columns based on `names` attribute.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeck[, 'Var2']\n#>  [1] 1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5\n```\n:::\n\n### Dollar signs and double brackets\n\nList and data.frame obey an optional second system of notation. You can extract values using `$` syntax: the data.frame's name and the column name separated by a `$` will select a column and return a vector (since the data in each column is actually a vector).\n\n\n::: {#exm-}\n\nHere is an exmaple about data.frames.\n\n::: {.cell}\n\n```{.r .cell-code}\ndeck[, 1]\n#>  [1] spades   hearts   clubs    diamonds spades   hearts   clubs    diamonds\n#>  [9] spades   hearts   clubs    diamonds spades   hearts   clubs    diamonds\n#> [17] spades   hearts   clubs    diamonds\n#> Levels: spades hearts clubs diamonds\ndeck$Var1\n#>  [1] spades   hearts   clubs    diamonds spades   hearts   clubs    diamonds\n#>  [9] spades   hearts   clubs    diamonds spades   hearts   clubs    diamonds\n#> [17] spades   hearts   clubs    diamonds\n#> Levels: spades hearts clubs diamonds\n```\n:::\nNote that if we select from the data.frame using index, we will get a data.frame.\n\n::: {.cell}\n\n```{.r .cell-code}\ndeck[1]\n#>        Var1\n#> 1    spades\n#> 2    hearts\n#> 3     clubs\n#> 4  diamonds\n#> 5    spades\n#> 6    hearts\n#> 7     clubs\n#> 8  diamonds\n#> 9    spades\n#> 10   hearts\n#> 11    clubs\n#> 12 diamonds\n#> 13   spades\n#> 14   hearts\n#> 15    clubs\n#> 16 diamonds\n#> 17   spades\n#> 18   hearts\n#> 19    clubs\n#> 20 diamonds\nclass(deck[1])\n#> [1] \"data.frame\"\n```\n:::\n:::\n::: {#exm-}\n\nHere is an example about lists.\n\n::: {.cell}\n\n```{.r .cell-code}\nlst <- list(numbers = c(1, 2), logical = TRUE, strings = c(\"a\", \"b\", \"c\"))\nlst$numbers\n#> [1] 1 2\n```\n:::\nNote that if we select from the list using index, we will get a list.\n\n::: {.cell}\n\n```{.r .cell-code}\nlst[1]\n#> $numbers\n#> [1] 1 2\nclass(lst[1])\n#> [1] \"list\"\n```\n:::\n:::\n\n\n\nPlease think through these two examples and figure out the similarity between them.\n\n\n\n\n::: {.callout-caution}\nUnderstanding the return value type is very important. Many of the R function work with vectors, but they don't work with lists. So using the correct way to get values is very important.\n:::\n\n\n\n::: {.callout-warning}\nThere is a command called `attach()` which let you get access to `deck$face` by just typing `face`. It is highly recommanded NOT to do this. It is much better to make everything explicit, especially when using IDE, typing is much easier.\n:::\n\n\n## Modifying values\n\n### Changing values in place\n\nYou can use R’s notation system to modify values within an R object. \n\n- In general when working with vectors, the two vectors should have the same length.\n- If the lengths are different, R will repeat the shorter one to make it match with the longer one. This is called the *vector recycling* rule. R will throw a warning if the two lengths are not proposional.\n\n::: {#exm-}\n::: {.cell}\n\n```{.r .cell-code}\n1:4 + 1:2\n#> [1] 2 4 4 6\n1:4 + 1:3\n#> Warning in 1:4 + 1:3: longer object length is not a multiple of shorter object\n#> length\n#> [1] 2 4 6 5\n```\n:::\n:::\n\n\n\n- We may create values that do not yet exist in the object. R will expand the object to accommodate the new values.\n\n\n::: {#exm-}\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- 1:6\nvec\n#> [1] 1 2 3 4 5 6\nvec[7] <- 0\nvec\n#> [1] 1 2 3 4 5 6 0\n```\n:::\n\n:::\n\n\n::: {#exm-}\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(a=c(1,2), b=c('a', 'b'))\ndf\n#>   a b\n#> 1 1 a\n#> 2 2 b\ndf$c <- 3:4\ndf\n#>   a b c\n#> 1 1 a 3\n#> 2 2 b 4\n```\n:::\n\n:::\n\n\n### Logical subsetting\nWe could compare two vectors element-wise, and the result is a logical vector. Then we could use this result to subset the vector / data.frame.\n\n\n\n::: {#exm-}\n\n::: {.cell}\n\n```{.r .cell-code}\nsuit <- c('spades', 'hearts', 'clubs', 'diamonds')\nface <- 1:5\ndeck <- expand.grid(suit, face)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndeck$Var1 == 'hearts'\n#>  [1] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE\n#> [13] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE\ndeck$Var2[deck$Var1 == 'hearts']\n#> [1] 1 2 3 4 5\ndeck[deck$Var1 == 'hearts',]\n#>      Var1 Var2\n#> 2  hearts    1\n#> 6  hearts    2\n#> 10 hearts    3\n#> 14 hearts    4\n#> 18 hearts    5\n```\n:::\nWe could directly assign values to the subset. Note that the following assignment create a new column with `NA` values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeck$Var3[deck$Var1 == 'hearts'] <- 1\ndeck\n#>        Var1 Var2 Var3\n#> 1    spades    1   NA\n#> 2    hearts    1    1\n#> 3     clubs    1   NA\n#> 4  diamonds    1   NA\n#> 5    spades    2   NA\n#> 6    hearts    2    1\n#> 7     clubs    2   NA\n#> 8  diamonds    2   NA\n#> 9    spades    3   NA\n#> 10   hearts    3    1\n#> 11    clubs    3   NA\n#> 12 diamonds    3   NA\n#> 13   spades    4   NA\n#> 14   hearts    4    1\n#> 15    clubs    4   NA\n#> 16 diamonds    4   NA\n#> 17   spades    5   NA\n#> 18   hearts    5    1\n#> 19    clubs    5   NA\n#> 20 diamonds    5   NA\n```\n:::\n\n\n:::\n\n\n:::{.callout-tip}\nOther than the regualr logical operators, R provides a speical one: `%in%`. \n\n`x %in% y`: Is `x` in the vector `y`?\n\nIf `x` is a vector, the output is a vector with the same length as `x`, telling whether each element of `x` is in `y` or not.\n:::\n\n\n::: {.callout-tip}\nOther than the regular Boolean operators, R provides two special ones: `any` and `all`. \n\n- `any(cond1, cond2, ...)`: Are any of these conditions true?\n- `all(cond1, cond2, ...)`: Are all of these conditions true?\n:::\n\n\n### Missing values `NA`\n\nIn R, missing values are `NA`, and you can directly work with `NA`. Any computations related to `NA` will return `NA`.\n\n1. `na.rm`: Most R functions come with the optional argument `na.rm`. If you set it to be `TRUE`, the function will ignore `NA` when evaluating the function.\n\n\n::: {#exm-}\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(c(NA, 1:50))\n#> [1] NA\nmean(c(NA, 1:50), na.rm=TRUE)\n#> [1] 25.5\n```\n:::\n\n:::\n\n2. `is.na()`: This is a function testing whether an object is `NA`.\n\n## Exercises\n\n\n\n::: {#exr-}\nStart a R Markdown / Quarto file. In the first section write a R code block to print `Hello world!`.\n:::\n\n\n::: {#exr-}\nWhich of these are character strings and which are numbers? `1`, `\"1\"`, `\"one\"`.\n:::\n\n\n::: {#exr-}\nCreate an atomic vector that stores just the face names of the cards: the ace of spades, king of spades, queen of spades, jack of spades, and ten of spades. Which type of vector will you use to save the names?\n\nHint: The face name of the ace of spades would be `ace` and `spades` is the suit.\n:::\n\n\n\n::: {#exr-}\nCreate the following matrix, which stores the name and suit of every card in a royal flush.\n\n::: {.cell}\n\n```\n#>      [,1]    [,2]    \n#> [1,] \"ace\"   \"spades\"\n#> [2,] \"king\"  \"spades\"\n#> [3,] \"queen\" \"spades\"\n#> [4,] \"jack\"  \"spades\"\n#> [5,] \"ten\"   \"spades\"\n```\n:::\n:::\n\n\n\n::: {#exr-}\nMany card games assign a numerical value to each card. For example, in blackjack, each face card is worth 10 points, each number card is worth between 2 and 10 points, and each ace is worth 1 or 11 points, depending on the final score.\n\nMake a virtual playing card by combining “ace” “heart” and 1 into a vector. What type of atomic vector will result? Check if you are right, and explain your reason.\n:::\n\n\n\n::: {#exr-}\nUse a list to store a single playing card, like the ace of hearts, which has a point value of one. The list should save the face of the card, the suit, and the point value in separate elements.\n:::\n\n\n::: {#exr-}\nConsider the following data.frame.\n\n::: {.cell}\n\n```{.r .cell-code}\nsuit <- c('spades', 'hearts', 'clubs', 'diamonds')\nface <- 1:5\ndeck <- expand.grid(suit, face)\n```\n:::\nPlease write some codes to count how many rows whose `Var1` are equal to `hearts`.\n:::\n\n\n::: {#exr-}\nConverte the following sentences into tests written with R code. \n\n- `w <- c(-1, 0, 1)`. Is `w` positive?\n- `x <- c(5, 15)`. Is `x` greater than `10` and less than `20`?\n- `y <- 'February'`. Is object `y` the word `February`?\n- `z <- c(\"Monday\", \"Tuesday\", \"Friday\")`. Is every value in `z` a day of the week?\n:::\n\n\n\n\n\n::: {#exr-}\nPlease write a function to shuffle the row of a data.frame. You may use the following data.frame `deck` for test.\n\n::: {.cell}\n\n```{.r .cell-code}\nsuit <- c('spades', 'hearts', 'clubs', 'diamonds')\nface <- 1:13\ndeck <- expand.grid(suit, face)\n```\n:::\n\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}